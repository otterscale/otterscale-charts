# =============================================================================
# OtterScale Helm Chart Configuration
# =============================================================================
# This file contains all configurable parameters for the OtterScale deployment.
# Modify these values according to your environment and requirements.

# -----------------------------------------------------------------------------
# Global Settings
# -----------------------------------------------------------------------------
global:
  # Image pull policy for all containers
  # Options: Always, IfNotPresent, Never
  imagePullPolicy: IfNotPresent
  
# -----------------------------------------------------------------------------
# Application Version
# -----------------------------------------------------------------------------
# Version tag for OtterScale service and web images
# This corresponds to APP_VERSION in the environment configuration
appVersion: latest

# -----------------------------------------------------------------------------
# PostgreSQL Database Configuration
# -----------------------------------------------------------------------------
postgres:
  # Database name to create
  # Corresponds to POSTGRES_DB in environment configuration
  db: otterscale
  
  # Database username
  # Corresponds to POSTGRES_USER in environment configuration
  user: otterscale
  
  # Database password (consider using external secrets in production)
  # Corresponds to POSTGRES_PASSWORD in environment configuration
  password: otterscale
  
  # PostgreSQL image configuration
  image:
    repository: postgres
    tag: "15"
    pullPolicy: IfNotPresent
  
  # Number of replicas (recommend keeping at 1 for single-instance PostgreSQL)
  replicas: 1
  
  # Host path storage configuration for single-node deployment
  # Data will be stored directly on the host node at the specified path
  hostPath:
    path: /usr/local/otterscale
  
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "1Gi"
      cpu: "1000m"
  
  healthCheck:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 10
    failureThreshold: 3

# -----------------------------------------------------------------------------
# OtterScale Service Configuration
# -----------------------------------------------------------------------------
otterscale:
  # Image configuration
  image:
    repository: ghcr.io/otterscale/otterscale/service
    tag: ""
    pullPolicy: IfNotPresent
  
  replicas: 1
  podAnnotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  # Service port configuration
  # Corresponds to SERVICE_PORT in environment configuration
  service:
    type: ClusterIP
    port: 8299
    targetPort: 8299
    # Additional service annotations
    annotations: {}
  
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"

# -----------------------------------------------------------------------------
# OtterScale Configuration File Content
# -----------------------------------------------------------------------------
# The content of otterscale.yaml configuration file
# This will be mounted as a ConfigMap
# Corresponds to CONFIG_VOLUME_PATH in environment configuration
configContent: |
  # OtterScale Service Configuration
  # This configuration file defines the service settings
  maas:
    url: http://127.0.0.1:5240/MAAS
    key: your_cert
    version: "2.0"

  juju:
    controller: maas-cloud-controller
    controller_addresses: []
    username: admin
    password: your_password
    ca_cert: |
      -----BEGIN CERTIFICATE-----
      xxxx
      -----END CERTIFICATE-----
    cloud_name: maas-cloud
    cloud_region: default
    charmhub_api_url: https://api.charmhub.io

  kube:
    helm_repository_urls:
    - https://charts.bitnami.com/bitnami

  ceph:
    rados_timeout: 0s

# -----------------------------------------------------------------------------
# OtterScale Web UI Configuration
# -----------------------------------------------------------------------------
otterscaleWeb:
  # Image configuration
  image:
    repository: ghcr.io/otterscale/otterscale/web
    tag: ""
    pullPolicy: IfNotPresent
  
  replicas: 1
  podAnnotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  # Service port configuration
  # Corresponds to WEB_PORT in environment configuration
  service:
    type: ClusterIP
    port: 3000
    targetPort: 3000
    # Additional service annotations
    annotations: {}
    nodePort: ""
  
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "200m"
  
  
  # Environment variables for OtterScale Web
  env:
    # Public URL for the web application
    # Corresponds to PUBLIC_URL in environment configuration
    # Must match the actual URL users will use to access the application
    publicUrl: "http://172.20.10.7/"
    
    # Public API URL for backend service
    # Corresponds to PUBLIC_API_URL in environment configuration
    # Must include protocol (http/https) and port number
    publicApiUrl: "http://172.20.10.7/api"
    
    # Secret key for authentication (generate a strong random string)
    # Corresponds to AUTH_SECRET in environment configuration
    # IMPORTANT: Generate with: openssl rand -base64 32
    # Example: openssl rand -base64 32
    authSecret: "please_change_this_to_a_secure_random_string"
    
    # Comma-separated list of trusted authentication providers
    # Corresponds to AUTH_TRUSTED_PROVIDERS in environment configuration
    # Example: "github,google,oidc"
    authTrustedProviders: "otterscale,otterscale-oidc"
    
    # OIDC provider identifier
    # Corresponds to AUTH_OIDC_PROVIDER in environment configuration
    # Example: https://accounts.google.com
    authOidcProvider: "otterscale-oidc"
    
    # GitHub OAuth application client ID
    # Corresponds to GITHUB_CLIENT_ID in environment configuration
    # Get this from GitHub Developer Settings > OAuth Apps
    githubClientId: ""
    
    # GitHub OAuth application client secret
    # Corresponds to GITHUB_CLIENT_SECRET in environment configuration
    # Get this from GitHub Developer Settings > OAuth Apps
    githubClientSecret: ""
    
    # GitHub personal access token for API access (optional)
    # Not in original env file - leave empty unless needed
    githubAccessToken: ""
    
    # SSO login prompt
    # Corresponds to SSO_LOGIN_PROMPT in environment configuration
    # Set to "true" to enable SSO login interface
    ssoLoginPrompt: "false"

# -----------------------------------------------------------------------------
# Docker Registry Configuration
# -----------------------------------------------------------------------------
dockerRegistry:
  # Enable or disable Docker Registry deployment
  enabled: true
  
  # Image configuration
  image:
    repository: registry
    tag: "3"
    pullPolicy: IfNotPresent
  
  # Number of replicas
  replicas: 1
  
  # Service configuration
  service:
    type: NodePort
    port: 5000
    nodePort: 32000
    # Additional service annotations
    annotations: {}
  
  # Storage configuration using hostPath
  storage:
    # Host path storage configuration for single-node deployment
    # Registry data will be stored directly on the host node at the specified path
    hostPath:
      path: /usr/local/otterscale/registry
  
  # Resource limits and requests
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  
  # Pod annotations
  podAnnotations: {}
  
  # Node selector
  nodeSelector: {}
  
  # Tolerations
  tolerations: []
  
  # Affinity rules
  affinity: {}
  
  # Security context
  securityContext:
    runAsNonRoot: false
    runAsUser: 0
    fsGroup: 0

# -----------------------------------------------------------------------------
# Istio Configuration
# -----------------------------------------------------------------------------
istio:
  # Enable or disable Istio integration
  # When enabled, will install Istio base + istiod via Helm dependencies
  enabled: true
  
  # Automatic sidecar injection
  # If true, enables automatic sidecar injection for the namespace
  sidecarInjection:
    enabled: true

  # Gateway configuration for external traffic
  gateway:
    enabled: true
    name: otterscale-gateway
    servers:
      # HTTP server
      - port:
          number: 80
          name: http
          protocol: HTTP
        # List of hosts that the gateway should serve
        hosts:
          - "*"
        # Optional: redirect HTTP to HTTPS
        # tls:
        #   httpsRedirect: true

      # HTTPS server (uncomment and configure for TLS)
      # - port:
      #     number: 443
      #     name: https
      #     protocol: HTTPS
      #   hosts:
      #     - "otterscale.example.com"
      #   tls:
      #     mode: SIMPLE
      #     credentialName: otterscale-tls-cert
  
  # VirtualService configuration for traffic routing
  virtualService:
    enabled: true

  # Destination rules for traffic policies (optional)
  destinationRule:
    enabled: false
    # Connection pool settings
    connectionPool:
      tcp:
        maxConnections: 100
      http:
        http1MaxPendingRequests: 100
        http2MaxRequests: 100
    # Outlier detection for circuit breaking
    outlierDetection:
      consecutiveErrors: 5
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50      
