# =============================================================================
# OtterScale Helm Chart Configuration
# =============================================================================
# This file contains all configurable parameters for the OtterScale deployment.
# Modify these values according to your environment and requirements.

# -----------------------------------------------------------------------------
# Global Settings
# -----------------------------------------------------------------------------
global:
  # Image pull policy for all containers
  # Options: Always, IfNotPresent, Never
  imagePullPolicy: IfNotPresent
  
# -----------------------------------------------------------------------------
# Application Version
# -----------------------------------------------------------------------------
# Version tag for OtterScale service and web images
# This corresponds to APP_VERSION in the environment configuration
appVersion: latest

# -----------------------------------------------------------------------------
# PostgreSQL Database Configuration
# -----------------------------------------------------------------------------
postgres:
  # Database name to create
  # Corresponds to POSTGRES_DB in environment configuration
  db: otterscale
  
  # Database username
  # Corresponds to POSTGRES_USER in environment configuration
  user: otterscale
  
  # Database password (consider using external secrets in production)
  # Corresponds to POSTGRES_PASSWORD in environment configuration
  password: your_secure_password_here
  
  # PostgreSQL image configuration
  image:
    repository: postgres
    tag: "15"
    pullPolicy: IfNotPresent
  
  # Number of replicas (recommend keeping at 1 for single-instance PostgreSQL)
  replicas: 1
  
  # Host path storage configuration for single-node deployment
  # Data will be stored directly on the host node at the specified path
  hostPath:
    path: /usr/local/otterscale
  
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "1Gi"
      cpu: "1000m"
  
  healthCheck:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 10
    failureThreshold: 3

# -----------------------------------------------------------------------------
# OtterScale Service Configuration
# -----------------------------------------------------------------------------
otterscale:
  # Image configuration
  image:
    repository: ghcr.io/otterscale/otterscale/service
    tag: ""
    pullPolicy: IfNotPresent
  
  replicas: 1
  podAnnotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  # Service port configuration
  # Corresponds to SERVICE_PORT in environment configuration
  service:
    type: ClusterIP
    port: 8299
    # Additional service annotations
    annotations: {}
  
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"

# -----------------------------------------------------------------------------
# OtterScale Configuration File Content
# -----------------------------------------------------------------------------
# The content of otterscale.yaml configuration file
# This will be mounted as a ConfigMap
# Corresponds to CONFIG_VOLUME_PATH in environment configuration
configContent: |
  # OtterScale Service Configuration
  # This configuration file defines the service settings
  maas:
    url: http://172.20.10.8:5240/MAAS
    key: zPCukXntO9th8l40EM:cGD9fM8HFB73JMjqFk:zaraMP3gQOMV3mUKa6ojkmyE8fGf8gyD
    version: "2.0"

  juju:
    controller: maas-cloud-controller
    controller_addresses:
    - 172.20.10.13:17070
    - "[2001:b400:e4d9:4598:0:1::]:17070"
    - "[2001:b400:e4d9:4598:216:3eff:fe19:f2a5]:17070"
    username: admin
    password: fba6c4c66d79bb937088dd73d3a8b95e
    ca_cert: |
      -----BEGIN CERTIFICATE-----
      MIIEEjCCAnqgAwIBAgIUEagr8V0Qg5cHU9IG/3AWmbI0le0wDQYJKoZIhvcNAQEL
      BQAwITENMAsGA1UEChMESnVqdTEQMA4GA1UEAxMHanVqdS1jYTAeFw0yNTA5MTkw
      NjU2MDFaFw0zNTA5MTkwNzAxMDFaMCExDTALBgNVBAoTBEp1anUxEDAOBgNVBAMT
      B2p1anUtY2EwggGiMA0GCSqGSIb3DQEBAQUAA4IBjwAwggGKAoIBgQDBjjE/woZZ
      QHTcaWE6j7Dcii/aPAmxYYF+kdm4S0N/+uOzKJ+jQPe+mE5ntyhORz1m2NtG7zQi
      /ZLEpM01rQ1Q/JkZRCnUd7pad+Cb5R1yE5dJpLRKehrmk526PAWUCEqlu8k7QnIf
      zaOammr0S34MCcMYm9BCMB6nMpohd6fVA7guhkTeokZ8Of+92DYMcvEp6yFZcVA9
      JpdjkA+RgeODa08GSMBk8SgTDXBgrdoNmyBknKC0MB7lQ7lAznCb4z2hBKHJcsLn
      kX6xBCkm68BdyJaJb/tB9dBaCASoU5SFxY/4uE/cxq/qUW/3EUI21+9qVHVUO6DI
      A0o8PxX6YDCFQ5Q9bcsNakN3BvRGguinhhfJMcDCswuTWQPt2GBJB17w94rhEegf
      v4LGRj+F+S28qBqFQStKeILCryDFgDZCNc//NJ2Whqqclw7q83kgdrLpwpXQBXX9
      Wq1NXTt7w+8vUQkzlJJuyxutquDaVnLpwlwIjWG+XN4NQ7SA+g4VAFUCAwEAAaNC
      MEAwDgYDVR0PAQH/BAQDAgKkMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFONo
      SvJ+dp9OkcqFpIssYePOBjN5MA0GCSqGSIb3DQEBCwUAA4IBgQCEOrqM+1VnBrn6
      boDkNYazwvDERLTqMROkrNNydUcD6yoU5L/x3pNmC+3+i5GlLfrIXx6nkqKQz/6v
      E9A87EtOYBv5rGnXk9tvlOgNW4mBS+wuTPAX5BBx70C+YmNDU+4ok0aUCRvYzJFN
      v/sQSw18nbVyh0Sa/lsIliZjEQO0GitRQlAtH8puzAYpf7fQm9QGIMJQEaSYk2Ti
      Y7rXKHtlQp+OKvkcUcuSmyVPyeB9HUoubP0pJBP0DxWmmd+i1YRJ/6BqO0n2M6sT
      DUhLrhEtU34MrFsOlCrJaE0kRdH5VqbKlRxUH/U0ODOOYgUZSaAVLVEgelNwu38W
      /N7fuzqo6nxTrwf3EHLF/mnrR9RFGN3RkVVp7SV31PHNoe6juAuKKlVXcau2/bv1
      GSOI9FLDMTfyQnrJTDqBDvNHuY1vUi4mbbm71pYTrAFgiWfxr0aW4+TMsPG37/NH
      EaBAMHo7pry7nzbFqqo6w6o5Pw/1PMA2cTTG4egRmUulb5mDHkc=
      -----END CERTIFICATE-----
    cloud_name: maas-cloud
    cloud_region: default
    charmhub_api_url: https://api.charmhub.io

  kube:
    helm_repository_urls:
    - http://chartmuseum:8080
    - https://charts.bitnami.com/bitnami

  ceph:
    rados_timeout: 0s

# -----------------------------------------------------------------------------
# OtterScale Web UI Configuration
# -----------------------------------------------------------------------------
otterscaleWeb:
  # Image configuration
  image:
    repository: ghcr.io/otterscale/otterscale/web
    tag: ""
    pullPolicy: IfNotPresent
  
  replicas: 1
  podAnnotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  # Service port configuration
  # Corresponds to WEB_PORT in environment configuration
  service:
    type: ClusterIP
    port: 3000
    # Additional service annotations
    annotations: {}
  
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "200m"
  
  
  # Environment variables for OtterScale Web
  env:
    # Public URL for the web application
    # Corresponds to PUBLIC_URL in environment configuration
    # Must match the actual URL users will use to access the application
    publicUrl: "http://localhost:3000"
    
    # Public API URL for backend service
    # Corresponds to PUBLIC_API_URL in environment configuration
    # Must include protocol (http/https) and port number
    publicApiUrl: ""
    
    # Secret key for authentication (generate a strong random string)
    # Corresponds to AUTH_SECRET in environment configuration
    # IMPORTANT: Generate with: openssl rand -base64 32
    # Example: openssl rand -base64 32
    authSecret: "please_change_this_to_a_secure_random_string"
    
    # Comma-separated list of trusted authentication providers
    # Corresponds to AUTH_TRUSTED_PROVIDERS in environment configuration
    # Example: "github,google,oidc"
    authTrustedProviders: "otterscale,otterscale-oidc"
    
    # OIDC provider identifier
    # Corresponds to AUTH_OIDC_PROVIDER in environment configuration
    # Example: https://accounts.google.com
    authOidcProvider: "otterscale-oidc"
    
    # GitHub OAuth application client ID
    # Corresponds to GITHUB_CLIENT_ID in environment configuration
    # Get this from GitHub Developer Settings > OAuth Apps
    githubClientId: ""
    
    # GitHub OAuth application client secret
    # Corresponds to GITHUB_CLIENT_SECRET in environment configuration
    # Get this from GitHub Developer Settings > OAuth Apps
    githubClientSecret: ""
    
    # GitHub personal access token for API access (optional)
    # Not in original env file - leave empty unless needed
    githubAccessToken: ""
    
    # SSO login prompt
    # Corresponds to SSO_LOGIN_PROMPT in environment configuration
    # Set to "true" to enable SSO login interface
    ssoLoginPrompt: "false"

# -----------------------------------------------------------------------------
# Istio Configuration
# -----------------------------------------------------------------------------
istio:
  # Enable or disable Istio integration
  # When enabled, will install Istio base + istiod via Helm dependencies
  enabled: true
  
  # Automatic sidecar injection
  # If true, enables automatic sidecar injection for the namespace
  sidecarInjection:
    enabled: true

  # Gateway configuration for external traffic
  gateway:
    enabled: true
    name: otterscale-gateway
    servers:
      # HTTP server
      - port:
          number: 80
          name: http
          protocol: HTTP
        # List of hosts that the gateway should serve
        hosts:
          - "otters-dev.phison.com"
          - "otters-web-dev.phison.com"
        # Optional: redirect HTTP to HTTPS
        # tls:
        #   httpsRedirect: true

      # HTTPS server (uncomment and configure for TLS)
      # - port:
      #     number: 443
      #     name: https
      #     protocol: HTTPS
      #   hosts:
      #     - "otterscale.example.com"
      #   tls:
      #     mode: SIMPLE
      #     credentialName: otterscale-tls-cert
  
  # VirtualService configuration for traffic routing
  virtualService:
    # Enable VirtualService for OtterScale API service
    otterscale:
      enabled: true
      # Hosts that the VirtualService applies to
      # Should match the Gateway hosts or specific domain
      hosts:
        - "otters-dev.phison.com"

    # Enable VirtualService for OtterScale Web UI
    web:
      enabled: true
      hosts:
        - "otters-web-dev.phison.com"

  # Destination rules for traffic policies (optional)
  destinationRule:
    enabled: false
    # Connection pool settings
    connectionPool:
      tcp:
        maxConnections: 100
      http:
        http1MaxPendingRequests: 100
        http2MaxRequests: 100
    # Outlier detection for circuit breaking
    outlierDetection:
      consecutiveErrors: 5
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50

# -----------------------------------------------------------------------------
# Docker Registry Configuration
# -----------------------------------------------------------------------------
dockerRegistry:
  # Enable or disable Docker Registry deployment
  enabled: true
  
  # Image configuration
  image:
    repository: registry
    tag: "3"
    pullPolicy: IfNotPresent
  
  # Number of replicas
  replicas: 1
  
  # Service configuration
  service:
    type: NodePort
    port: 5000
    nodePort: 32000
    # Additional service annotations
    annotations: {}
  
  # Storage configuration using hostPath
  storage:
    # Host path storage configuration for single-node deployment
    # Registry data will be stored directly on the host node at the specified path
    hostPath:
      path: /usr/local/otterscale/registry
  
  # Resource limits and requests
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  
  # Pod annotations
  podAnnotations: {}
  
  # Node selector
  nodeSelector: {}
  
  # Tolerations
  tolerations: []
  
  # Affinity rules
  affinity: {}
  
  # Security context
  securityContext:
    runAsNonRoot: false
    runAsUser: 0
    fsGroup: 0

# -----------------------------------------------------------------------------
# OPA Gatekeeper Configuration
# -----------------------------------------------------------------------------
# Open Policy Agent Gatekeeper provides policy and governance for Kubernetes
gatekeeper:
  # Enable or disable OPA Gatekeeper deployment
  enabled: true
  
  # Number of controller manager replicas for high availability
  replicas: 1
  
  # Audit configuration
  audit:
    # Audit interval in seconds (how often violations are checked)
    interval: 60
    # Maximum number of constraint violations to report
    constraintViolationsLimit: 20
    # Disable audit functionality (not recommended)
    disabled: false
    # Run audit from cache for better performance
    fromCache: false
    # Chunk size for processing audit results
    chunkSize: 500
  
  # Webhook configuration for admission control
  validatingWebhook:
    # Webhook timeout in seconds
    timeoutSeconds: 3
    # Failure policy when webhook is unavailable (Fail or Ignore)
    failurePolicy: Fail
    # Webhook name
    name: gatekeeper-validating-webhook-configuration
    # Enable delete operations validation
    enableDeleteOperations: false
    # Enable connect operations validation  
    enableConnectOperations: false
  
  # Mutating webhook configuration
  mutatingWebhook:
    # Webhook timeout in seconds
    timeoutSeconds: 1
    # Failure policy when webhook is unavailable (Fail or Ignore)
    failurePolicy: Fail
    # Reinvocation policy (Never or IfNeeded)
    reinvocationPolicy: Never
    # Webhook name
    name: gatekeeper-mutating-webhook-configuration
    # Disable mutation functionality
    disabled: false
  
  image:
    repository: openpolicyagent/gatekeeper
    crdRepository: openpolicyagent/gatekeeper-crds
    tag: v3.20.1
    pullPolicy: IfNotPresent
    pullSecrets: []
  
  # Controller manager configuration
  controllerManager:
    # Service account name
    serviceAccount:
      name: gatekeeper-admin
    # Network configuration
    hostNetwork: false
    dnsPolicy: ClusterFirst
    # Ports configuration
    port: 8443
    metricsPort: 8888
    healthPort: 9090
    # Priority class for scheduling
    priorityClassName: system-cluster-critical
    # TLS configuration
    tlsMinVersion: 1.3
    disableCertRotation: false
    # Exempt namespaces from policy enforcement
    exemptNamespaces:
      - kube-system
      - kube-public  
      - istio-system
    exemptNamespacePrefixes: []
    # Deployment strategy
    strategyType: RollingUpdate
    resources:
      limits:
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 512Mi
    # Node selector for pod placement
    nodeSelector:
      kubernetes.io/os: linux
    # Security context
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      readOnlyRootFilesystem: true
      runAsGroup: 999
      runAsNonRoot: true
      runAsUser: 1000
    # Pod security context
    podSecurityContext:
      fsGroup: 999
      supplementalGroups:
        - 999
    # Anti-affinity for high availability
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: gatekeeper.sh/operation
                    operator: In
                    values:
                      - webhook
              topologyKey: kubernetes.io/hostname
            weight: 100
  
  # Logging configuration
  logging:
    # Log level (DEBUG, INFO, WARNING, ERROR)
    level: INFO
    # Log policy denials
    logDenies: false
    # Log mutation events
    logMutations: false
  
  # Metrics and monitoring
  metrics:
    backends: ["prometheus"]
  
  # External data provider configuration
  externalData:
    # Enable external data provider support
    enabled: true
    # Response cache TTL
    providerResponseCacheTTL: 3m
  
  # Kubernetes native validation
  k8sNativeValidation:
    enabled: true
  
  # Generator resource expansion
  generatorResourceExpansion:
    enabled: true
  
  # Resource quota for critical pods
  resourceQuota: true
  
  # Pod disruption budget
  pdb:
    controllerManager:
      minAvailable: 1
  
  # Network policy (optional)
  networkPolicy:
    enabled: false
  
  # RBAC configuration
  rbac:
    create: true
  
  # Service account configuration
  serviceAccount:
    gatekeeperAdmin:
      create: true
  
  # Post-installation configuration
  postInstall:
    labelNamespace:
      enabled: true
      serviceAccount:
        name: gatekeeper-update-namespace-label
        create: true
      # Pod security standards for labeled namespaces
      podSecurity:
        - "pod-security.kubernetes.io/audit=restricted"
        - "pod-security.kubernetes.io/audit-version=latest"
        - "pod-security.kubernetes.io/warn=restricted"
        - "pod-security.kubernetes.io/warn-version=latest"
        - "pod-security.kubernetes.io/enforce=restricted"
        - "pod-security.kubernetes.io/enforce-version=v1.24"
    # Webhook probe configuration
    probeWebhook:
      enabled: true
      image:
        repository: curlimages/curl
        tag: 8.12.0
        pullPolicy: IfNotPresent
      waitTimeout: 60
      httpTimeout: 2
  
  # CRD upgrade configuration
  upgradeCRDs:
    enabled: true
    serviceAccount:
      create: true
      name: gatekeeper-admin-upgrade-crds
  
  # Pod security policy (deprecated in newer Kubernetes versions)
  psp:
    enabled: false
  
  # Additional disabled built-ins for security
  disabledBuiltins: ["{http.send}"]


# -----------------------------------------------------------------------------
# Kong Configuration
# -----------------------------------------------------------------------------
kong:
  enabled: true
  ingressController:
    enabled: true
  admin:
    enabled: false
  image:
    repository: docker.io/kong/kong
    tag: "3.9"
  proxy:
    enabled: false
  