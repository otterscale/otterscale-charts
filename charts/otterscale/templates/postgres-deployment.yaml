apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "otterscale.fullname" . }}-postgres
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "otterscale.labels" . | nindent 4 }}
    app.kubernetes.io/component: database
spec:
  replicas: {{ .Values.postgres.replicas }}
  strategy:
    type: Recreate
  selector:
    matchLabels:
      {{- include "otterscale.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: database
  template:
    metadata:
      labels:
        {{- include "otterscale.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: database
      annotations:
        checksum/secret: {{ include (print $.Template.BasePath "/postgres-secret.yaml") . | sha256sum }}
    spec:
      containers:
        - name: postgres
          image: "{{ .Values.postgres.image.repository }}:{{ .Values.postgres.image.tag }}"
          imagePullPolicy: {{ .Values.postgres.image.pullPolicy }}
          env:
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: {{ include "otterscale.fullname" . }}-postgres
                  key: postgres-db
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "otterscale.fullname" . }}-postgres
                  key: postgres-user
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "otterscale.fullname" . }}-postgres
                  key: postgres-password
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          ports:
            - name: postgres
              containerPort: 5432
              protocol: TCP
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
          {{- if .Values.postgres.healthCheck.enabled }}
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
            initialDelaySeconds: {{ .Values.postgres.healthCheck.initialDelaySeconds }}
            periodSeconds: {{ .Values.postgres.healthCheck.periodSeconds }}
            timeoutSeconds: {{ .Values.postgres.healthCheck.timeoutSeconds }}
            failureThreshold: {{ .Values.postgres.healthCheck.failureThreshold }}
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
            initialDelaySeconds: {{ .Values.postgres.healthCheck.initialDelaySeconds }}
            periodSeconds: {{ .Values.postgres.healthCheck.periodSeconds }}
            timeoutSeconds: {{ .Values.postgres.healthCheck.timeoutSeconds }}
            failureThreshold: {{ .Values.postgres.healthCheck.failureThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.postgres.resources | nindent 12 }}
      volumes:
        - name: postgres-data
          hostPath:
            path: {{ .Values.postgres.hostPath.path }}/postgres
            type: DirectoryOrCreate
